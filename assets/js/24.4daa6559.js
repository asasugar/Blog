(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{276:function(s,a,t){"use strict";t.r(a);var n=t(17),e=Object(n.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"除了pr以外，如何优雅地解决npm依赖-bug"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#除了pr以外，如何优雅地解决npm依赖-bug"}},[s._v("#")]),s._v(" 除了PR以外，如何优雅地解决npm依赖 bug")]),s._v(" "),t("p",[s._v("试想这样一种场景：当我们遇到 npm 依赖的bug，并且在本地 node_modules 中进行修复了，然后一个依赖更新（npm i 或者 yarn等等）就把 node_modules 里面的更改覆盖了。同时，因为修改是本地的，我们没有办法很便捷地在团队中进行共享（通常是每个人都在本地进行修改...）")]),s._v(" "),t("p",[s._v("本文介绍的 "),t("code",[s._v("patch-package")]),s._v(" 这个开源项目就是解决上面的问题，它有以下的特点：")]),s._v(" "),t("ul",[t("li",[s._v("持久化更改到本地")]),s._v(" "),t("li",[s._v("通过执行简单的命令就能同步更改，给你的依赖打上一个补丁")])]),s._v(" "),t("h2",{attrs:{id:"一、安装依赖与添加脚本命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、安装依赖与添加脚本命令"}},[s._v("#")]),s._v(" 一、安装依赖与添加脚本命令")]),s._v(" "),t("h3",{attrs:{id:"_1-首先安装依赖"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-首先安装依赖"}},[s._v("#")]),s._v(" 1. 首先安装依赖")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("yarn")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" patch-package postinstall-postinstall\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h3",{attrs:{id:"_2-安装依赖后，在-package-json-文件中添加一个脚本命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-安装依赖后，在-package-json-文件中添加一个脚本命令"}},[s._v("#")]),s._v(" 2. 安装依赖后，在 package.json 文件中添加一个脚本命令")]),s._v(" "),t("div",{staticClass:"language-json line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-json"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"scripts"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"postinstall"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"patch-package"')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[t("code",[s._v("postinstall")]),s._v(" 钩子会在 yarn、yarn install 或者 yarn add 命令之后触发，目的是在依赖更新后将补丁打进依赖。而依赖更新还有另外一个操作："),t("code",[s._v("yarn remove")]),s._v("，"),t("code",[s._v("postinstall-postinstall")]),s._v(" 这个包就是保证执行 "),t("code",[s._v("yarn remove")]),s._v(" 后也能触发 "),t("code",[s._v("postinstall")]),s._v(" 的执行。")]),s._v(" "),t("h3",{attrs:{id:"_3-修改依赖"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-修改依赖"}},[s._v("#")]),s._v(" 3. 修改依赖")]),s._v(" "),t("p",[s._v("这里以修改 "),t("code",[s._v("node_modules/react/index.js")]),s._v(" 这个依赖文件为例，在里面添加一条 "),t("code",[s._v("console.log")]),s._v(" 语句：")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'use strict'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\nconsole"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'patch-package'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("process"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("env"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("NODE_ENV")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'production'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  module"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("exports "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("require")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'./cjs/react.production.min.js'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  module"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("exports "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("require")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'./cjs/react.development.js'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("h3",{attrs:{id:"_4-生成补丁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-生成补丁"}},[s._v("#")]),s._v(" 4. 生成补丁")]),s._v(" "),t("p",[s._v("生成补丁的命令是：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("yarn")]),s._v(" patch-package package-name\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("上面的 "),t("code",[s._v("package-name")]),s._v(" 就是我们修改的依赖包名，在这个例子中为 "),t("code",[s._v("react")]),s._v("。执行 "),t("code",[s._v("yarn patch-package react")]),s._v(" 后可以看到根目录新增了一个 "),t("code",[s._v("patches")]),s._v(" 目录。")]),s._v(" "),t("p",[t("code",[s._v("patches")]),s._v(" 目录下的文件就是记录 "),t("code",[s._v("node_modules")]),s._v(" 中的变更操作，因此我们可以将补丁文件上传到 "),t("code",[s._v("git")]),s._v(" 仓库，团队其他开发者拉取代码后，只需要执行 "),t("code",[s._v("patch-package")]),s._v(" 命令就能同步给 "),t("code",[s._v("node_modules")]),s._v(" 打上补丁。")])])}),[],!1,null,null,null);a.default=e.exports}}]);